\C{documents} Documents

A document in Xapian is simply an item which is returned by a search.  When
building a new search system, the first decision to take is usually to decide
what the documents in your system are going to be.  For example, for a search
over a website, there might be one document for each page of the site.
However, you could instead choose to use one document for each paragraph of
each page, or to group pages together into subjects and have one document for
each subject.  Choosing the best way to divide your data up is discussed in
detail in \k{index-strategy}.

\H{terms-data-values} Terms, data, values.

Documents have three components: terms, data and values.

\e{Terms} are the basic unit of information retrieval used by Xapian.  At its
simplest, a search is a process of matching terms specified in a query against
terms in a document, and returning the best matches.  A term will often be
generated for each word in a piece of text, possibly by applying some form of
normalisation (such as applying a \e{stemmer} to convert different forms of a
word to a standard form), but this isn't required, and there is a very wide
range of useful strategies for producing terms.

\e{Data} is an arbitrary blob of data associated with the document.  Xapian
does nothing with this data other than store it in the database and return it
when requested.  It can be used to hold a reference to an external piece of
information about the document (such as the primary key in an external database
table containing the document information), or could be used to store the full
text of the document.  Generally, the best thing to do with the document data
is to store any information you need to display the resulting document to the
user (or to whatever process consumes the results of searches).  There is no
standard serialisation scheme for putting structured data into the document
data: depending on your application, you might want to roll a simple scheme
using newlines to separate values, use JSON or XML serialisation, or use some
language-specific method of pickling data.

\e{Values} are, in a sense, a more flexible version of terms.  Each document
can have a set of values associated with it, which hold pieces of data which
can be useful during a search.  These pieces of data could be things such as
keys which you want to be able to sort the results on, or numbers to be used to
affect the weight calculated for documents during the search.  It is important
to keep the amount of data stored in the values to a minimum, since the data
for a large number of documents will be read during the search, and unused data
will thus slow the search down.  Developers are often tempted to use the value
slots to hold inforamtion which should really be stored in the document's data
area; don't succumb to this temptation.

\H{docs-dos-and-donts} Dos and Don'ts

\b Don't commit or flush after every modification, unless you really need to.
Modifications are much much faster if they're grouped together.  If you must
flush every modification immediately, consider using a small database of recent
modifications, merged with a larger database of earlier modifications.

\b Don't put data into value slots which isn't going to be used during the
search process. It's often tempting to do this to get an easy way to store
fielded data, but storing extra data in the values will crowd some of the data
required for searches out of the cache, producing a slower search.  Use the
document "data" slot for this.

\H{building-documents} Building documents.

\H{adding-documents} Adding documents.

\H{modifying-documents} Modifying documents.

\H{deleting-documents} Deleting documents.

\H{lazy-loading} Lazy loading.

Issues related to ticket #423.

\H{serialising} Serialising.
